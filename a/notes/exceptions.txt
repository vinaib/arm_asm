--------------------------------------------------------------------------------
Exceptions
--------------------------------------------------------------------------------
-> When an exception occurs, the core saves the current status and the return
   address, enters a specific mode and possibly disables hardware interrupts.

-> Execution handling for a given exception starts from a fixed memory address
   called an exception vector for that exception.

-> Privileged software can program the location of a set of exception vectors
   into system registers, and they are executed automatically when respective
   exceptions are taken.
--------------------------------------------------------------------------------
Types of Exceptions
--------------------------------------------------------------------------------
1) Interrupts
2) Aborts
3) Reset
4) Exception generating instructions
4a) SVC: supervisor
4b) HVC: Hypervisor
4c) SMC: Secure Monitor Call
5) undefined

--------------------------------------------------------------------------------
Interrupts
--------------------------------------------------------------------------------
-> two types: IRQ, FIQ

-> FIQ is higher priority than IRQ

-> FIQ also has some potential speed advantages owing to its position in the
   vector table and the higher number of banked registers available in FIQ mode.

-> This potentially saves clock cycles on pushing registers to the stack within
   the handler.

-> external hardware asserts an interrupt request line and the corresponding
   exception type is raised when the current instruction finishes executing.

-> FIQ and IRQ are physical signals to the core. On almost all systems, various
   interrupts sources will be connected using an interrupt controller.

-> The interrupt controller arbitrates and prioritizes interrupts, and in turn
   provides a serialized single signal that is then connected to the FIQ or IRQ
   signal of the core.

-> Because the occurrence of IRQ and FIQ interrupts are not directly related to
   the software being executed by the core at any given time, they are
   classified as asynchronous exceptions.

--------------------------------------------------------------------------------
Aborts
--------------------------------------------------------------------------------
1) prefetch abort: Failed instruction fetch
2) data abort: Failed data accesses
3) synchronous abort
4) asynchronous abort

Source of Abort: (External memory & MMU):

1) They can come from the external memory system giving an error response on a
   memory access. indicating perhaps that the specified address does not
   correspond to real memory in the system

2) Alternatively, the abort can be generated by the Memory Management Unit (MMU)
   of the core. An operating system can use MMU aborts to dynamically allocate
   memory to applications.

--------------------------------------------------------------------------------
About Prefetch:
--------------------------------------------------------------------------------

1) An instruction can be marked within the pipeline as aborted, when it is
   fetched. The exception takes place before the instruction executes.

2) The prefetch abort exception is taken only if the core then tries to execute
   it.   
   
3) If the pipeline is flushed before the aborted instruction reaches the execute
   stage of the pipeline, the abort exception will not occur.

--------------------------------------------------------------------------------
About Data abort:
--------------------------------------------------------------------------------

1) A data abort exception happens when a load or store instruction executes and
   is considered to happen after the data read or write has been attempted.

--------------------------------------------------------------------------------
About synchronous abort:
--------------------------------------------------------------------------------

1) An abort is described as synchronous if it is generated as a result of
   execution or attempted execution of the instruction stream.

2) The return address will provide details of the instruction that caused it.

3) Aborts generated by the MMU are always synchronous

--------------------------------------------------------------------------------
About asynchronous abort:
--------------------------------------------------------------------------------

1) An asynchronous abort is not generated by executing instructions.

2) the return address might not always provide details of what caused the abort.

3) The ARMv7 architecture distinguishes between precise and imprecise
   asynchronous aborts.

--------------------------------------------------------------------------------
About Precise asynchronous aborts:
--------------------------------------------------------------------------------

1) For precise asynchronous aborts, the abort handler can be certain which
   instruction caused the abort and that no additional instructions were
   executed after that instruction.

--------------------------------------------------------------------------------
About imprecise asynchronous aborts:
--------------------------------------------------------------------------------

1) This is in contrast to an imprecise asynchronous abort, the result when the
   external memory system reports an error on an unidentifiable access.
   (contrast: means opposite)

2) In this case, the abort handler cannot determine which instruction caused the
   problem, or if additional instructions might have executed after the one that
   generated the abort.	

3) For example, 
	if a buffered write receives an error response from the external memory
	system, additional instructions will have been executed after the store.
	This means that it is impossible for the abort handler to fix the problem
	and return to the application. All it can do is to kill the application that
	caused the problem.

4) Device probing therefore requires special handling, as externally reported
   aborts on reads to non-existent areas will generate imprecise synchronous
   aborts even when such memory is marked as Strongly-ordered, or Device.

5) Detection of asynchronous aborts is controlled by the CPSR A bit. 

6) If the A bit is set, asynchronous aborts from the external memory system will
   be recognized by the core, but no abort exception is generated. Instead, the
   core keeps the abort pending until the A bit is cleared and takes an
   exception at that time. Kernel code will use a barrier instruction to ensure
   that pending asynchronous aborts are recognized against the correct
   application.If a thread has to be killed because of an imprecise abort, it
   must be the correct one!

--------------------------------------------------------------------------------
Reset
--------------------------------------------------------------------------------

1) All cores have a reset input and will take the reset exception immediately
   after they have been reset.

2) It is the highest priority exception and cannot be masked.

3) This exception is used to execute code on the core to initialize it, after
   power up.

